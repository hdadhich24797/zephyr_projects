diff --git a/drivers/sensor/CMakeLists.txt b/drivers/sensor/CMakeLists.txt
index fbc70fffc3..784d401a02 100644
--- a/drivers/sensor/CMakeLists.txt
+++ b/drivers/sensor/CMakeLists.txt
@@ -88,6 +88,7 @@ add_subdirectory_ifdef(CONFIG_TACH_XEC		mchp_tach_xec)
 add_subdirectory_ifdef(CONFIG_ITDS		wsen_itds)
 add_subdirectory_ifdef(CONFIG_MCUX_ACMP		mcux_acmp)
 add_subdirectory_ifdef(CONFIG_TACH_NPCX		nuvoton_tach_npcx)
+add_subdirectory_ifdef(CONFIG_HC_SR04		hc_sr04)
 
 zephyr_sources_ifdef(CONFIG_USERSPACE sensor_handlers.c)
 zephyr_sources_ifdef(CONFIG_SENSOR_SHELL sensor_shell.c)
diff --git a/drivers/sensor/Kconfig b/drivers/sensor/Kconfig
index df434d3ade..bfc1378e42 100644
--- a/drivers/sensor/Kconfig
+++ b/drivers/sensor/Kconfig
@@ -212,4 +212,6 @@ source "drivers/sensor/mcux_acmp/Kconfig"
 
 source "drivers/sensor/nuvoton_tach_npcx/Kconfig"
 
+source "drivers/sensor/hc_sr04/Kconfig"
+
 endif # SENSOR
diff --git a/drivers/sensor/hc_sr04/CMakeLists.txt b/drivers/sensor/hc_sr04/CMakeLists.txt
new file mode 100644
index 0000000000..afe464e39c
--- /dev/null
+++ b/drivers/sensor/hc_sr04/CMakeLists.txt
@@ -0,0 +1,9 @@
+#
+# Copyright (c) 2019 Nordic Semiconductor
+#
+# SPDX-License-Identifier: LicenseRef-BSD-5-Clause-Nordic
+#
+
+zephyr_library()
+
+zephyr_library_sources(hc_sr04.c)
diff --git a/drivers/sensor/hc_sr04/Kconfig b/drivers/sensor/hc_sr04/Kconfig
new file mode 100644
index 0000000000..26e0c83f04
--- /dev/null
+++ b/drivers/sensor/hc_sr04/Kconfig
@@ -0,0 +1,19 @@
+# HC-SR04 Ultrasonic Ranging Module
+#
+# Copyright (c) 2020 Daniel Veilleux
+#
+# SPDX-License-Identifier: LicenseRef-BSD-5-Clause-Nordic
+#
+
+menuconfig HC_SR04
+	bool "HC-SR04 Ultrasonic Ranging Module"
+	help
+	  Enable HC-SR04 ultrasonic distance sensor.
+
+if HC_SR04
+
+module = HC_SR04
+module-str = HC-SR04
+source "${ZEPHYR_BASE}/subsys/logging/Kconfig.template.log_config"
+
+endif #HC_SR04
diff --git a/drivers/sensor/hc_sr04/hc_sr04.c b/drivers/sensor/hc_sr04/hc_sr04.c
new file mode 100644
index 0000000000..1945bd96c9
--- /dev/null
+++ b/drivers/sensor/hc_sr04/hc_sr04.c
@@ -0,0 +1,266 @@
+/*
+ * Copyright (c) 2020 Daniel Veilleux
+ *
+ * SPDX-License-Identifier: LicenseRef-BSD-5-Clause-Nordic
+ */
+
+/*
+ * NOTE: Invalid measurements manifest as a 128600us pulse followed by a second pulse of ~6us
+ *       about 145us later. This pulse can't be truncated so it effectively reduces the sensor's
+ *       working rate.
+ */
+
+#define DT_DRV_COMPAT elecfreaks_hc_sr04
+
+#include <kernel.h>
+#include <device.h>
+#include <drivers/gpio.h>
+#include <drivers/sensor.h>
+#include <device.h>
+#include <devicetree.h>
+
+#include <logging/log.h>
+
+LOG_MODULE_REGISTER(hc_sr04, CONFIG_HC_SR04_LOG_LEVEL);
+
+/* Timings defined by spec */
+#define T_TRIG_PULSE_US       11
+#define T_INVALID_PULSE_US    25000
+#define T_MAX_WAIT_MS         130
+#define T_SPURIOS_WAIT_US     145
+#define METERS_PER_SEC        340
+#define INCHES                39.3701
+
+enum hc_sr04_state {
+    HC_SR04_STATE_IDLE,
+    HC_SR04_STATE_RISING_EDGE,
+    HC_SR04_STATE_FALLING_EDGE,
+    HC_SR04_STATE_FINISHED,
+    HC_SR04_STATE_ERROR,
+    HC_SR04_STATE_COUNT
+};
+
+static struct hc_sr04_shared_resources {
+    struct k_sem         fetch_sem;
+    struct k_mutex       mutex;
+    bool                 ready; /* The module has been initialized */
+    enum hc_sr04_state   state;
+    uint32_t             start_time;
+    uint32_t             end_time;
+} m_shared_resources;
+
+struct hc_sr04_data {
+    struct sensor_value   sensor_value;
+    const struct device  *trig_dev;
+    const struct device  *echo_dev;
+    struct gpio_callback  echo_cb_data;
+};
+
+struct hc_sr04_cfg {
+    const char * const   trig_port;
+    const uint8_t        trig_pin;
+    const uint32_t       trig_flags;
+    const char * const   echo_port;
+    const uint8_t        echo_pin;
+    const uint32_t       echo_flags;
+};
+
+static void input_changed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
+{
+    switch (m_shared_resources.state) {
+    case HC_SR04_STATE_RISING_EDGE:
+        m_shared_resources.start_time = k_cycle_get_32();
+        m_shared_resources.state = HC_SR04_STATE_FALLING_EDGE;
+        break;
+    case HC_SR04_STATE_FALLING_EDGE:
+        m_shared_resources.end_time = k_cycle_get_32();
+        (void) gpio_remove_callback(dev, cb);
+        m_shared_resources.state = HC_SR04_STATE_FINISHED;
+        k_sem_give(&m_shared_resources.fetch_sem);
+        break;
+    default:
+        (void) gpio_remove_callback(dev, cb);
+        m_shared_resources.state = HC_SR04_STATE_ERROR;
+        break;
+    }
+}
+
+static int hc_sr04_init(const struct device *dev)
+{
+    int err;
+
+    struct hc_sr04_data      *p_data = dev->data;
+    const struct hc_sr04_cfg *p_cfg  = dev->config;
+
+    p_data->sensor_value.val1 = 0;
+    p_data->sensor_value.val2 = 0;
+
+    p_data->trig_dev = device_get_binding(p_cfg->trig_port);
+    if (!p_data->trig_dev) {
+        return -ENODEV;
+    }
+    p_data->echo_dev = device_get_binding(p_cfg->echo_port);
+    if (!p_data->echo_dev) {
+        return -ENODEV;
+    }
+    err = gpio_pin_configure(p_data->trig_dev, p_cfg->trig_pin, (GPIO_OUTPUT | p_cfg->trig_flags));
+    if (err != 0) {
+        return err;
+    }
+    err = gpio_pin_configure(p_data->echo_dev, p_cfg->echo_pin, (GPIO_INPUT | p_cfg->echo_flags));
+    if (err != 0) {
+        return err;
+    }
+    err = gpio_pin_interrupt_configure(p_data->echo_dev,
+                                       p_cfg->echo_pin,
+                                       GPIO_INT_EDGE_BOTH);
+    if (err != 0) {
+        return err;
+    }
+    gpio_init_callback(&p_data->echo_cb_data, input_changed, BIT(p_cfg->echo_pin));
+
+    if (m_shared_resources.ready) {
+        /* Already initialized */
+        return 0;
+    }
+
+    err = k_sem_init(&m_shared_resources.fetch_sem, 0, 1);
+    if (0 != err) {
+        return err;
+    }
+    err = k_mutex_init(&m_shared_resources.mutex);
+    if (0 != err) {
+        return err;
+    }
+
+    m_shared_resources.state = HC_SR04_STATE_IDLE;
+    m_shared_resources.ready = true;
+    return 0;
+}
+
+static int hc_sr04_sample_fetch(const struct device *dev, enum sensor_channel chan)
+{
+    int      err;
+    uint32_t count;
+    
+    struct hc_sr04_data      *p_data = dev->data;
+    const struct hc_sr04_cfg *p_cfg  = dev->config;
+
+    if (unlikely((SENSOR_CHAN_ALL != chan) && (SENSOR_CHAN_DISTANCE != chan))) {
+        return -ENOTSUP;
+    }
+
+    if (unlikely(!m_shared_resources.ready)) {
+        LOG_ERR("Driver is not initialized yet");
+        return -EBUSY;
+    }
+
+    err = k_mutex_lock(&m_shared_resources.mutex, K_FOREVER);
+    if (0 != err) {
+        return err;
+    }
+
+    err = gpio_add_callback(p_data->echo_dev, &p_data->echo_cb_data);
+    if (0 != err) {
+        LOG_DBG("Failed to add HC-SR04 echo callback");
+        (void) k_mutex_unlock(&m_shared_resources.mutex);
+        return -EIO;
+    }
+
+    m_shared_resources.state = HC_SR04_STATE_RISING_EDGE;
+    gpio_pin_set(p_data->trig_dev, p_cfg->trig_pin, 1);
+    k_busy_wait(T_TRIG_PULSE_US);
+    gpio_pin_set(p_data->trig_dev, p_cfg->trig_pin, 0);
+
+    if (0 != k_sem_take(&m_shared_resources.fetch_sem, K_MSEC(T_MAX_WAIT_MS))) {
+        LOG_DBG("No response from HC-SR04");
+        (void) k_mutex_unlock(&m_shared_resources.mutex);
+        err = gpio_remove_callback(p_data->echo_dev, &p_data->echo_cb_data);
+        if (0 != err) {
+            return err;
+        }
+        return -EIO;
+    }
+
+    __ASSERT_NO_MSG(HC_SR04_STATE_FINISHED == m_shared_resources.state);
+
+    if (m_shared_resources.start_time <= m_shared_resources.end_time) {
+        count = (m_shared_resources.end_time - m_shared_resources.start_time);
+    } else {
+        count =  (0xFFFFFFFF - m_shared_resources.start_time);
+        count += m_shared_resources.end_time;
+    }
+    /* Convert from ticks to nanoseconds and then to microseconds */
+    count = k_cyc_to_us_near32(count);
+    if ((T_INVALID_PULSE_US > count) && (T_TRIG_PULSE_US < count)) {
+        /* Convert to meters and divide round-trip distance by two */
+        count = (count * METERS_PER_SEC * INCHES / 2);
+        p_data->sensor_value.val2 = (count % 1000000);
+        p_data->sensor_value.val1 = (count / 1000000);
+    } else {
+        LOG_INF("Invalid measurement");
+        p_data->sensor_value.val1 = 0;
+        p_data->sensor_value.val2 = 0;
+        k_usleep(T_SPURIOS_WAIT_US);
+    }
+
+    err = k_mutex_unlock(&m_shared_resources.mutex);
+    if (0 != err) {
+        return err;
+    }
+    return 0;
+}
+
+static int hc_sr04_channel_get(const struct device *dev,
+                    enum sensor_channel chan,
+                    struct sensor_value *val)
+{
+    const struct hc_sr04_data *p_data = dev->data;
+
+    if (unlikely(!m_shared_resources.ready)) {
+        LOG_WRN("Device is not initialized yet");
+        return -EBUSY;
+    }
+
+    switch (chan) {
+    case SENSOR_CHAN_DISTANCE:
+        val->val2 = p_data->sensor_value.val2;
+        val->val1 = p_data->sensor_value.val1;
+        break;
+    default:
+        return -ENOTSUP;
+    }
+    return 0;
+}
+
+static const struct sensor_driver_api hc_sr04_driver_api = {
+    .sample_fetch = hc_sr04_sample_fetch,
+    .channel_get  = hc_sr04_channel_get,
+};
+
+#define INST(num) DT_INST(num, elecfreaks_hc_sr04)
+
+#define HC_SR04_DEVICE(n) \
+    static const struct hc_sr04_cfg hc_sr04_cfg_##n = { \
+        .trig_port  = DT_GPIO_LABEL(INST(n), trig_gpios), \
+        .trig_pin   = DT_GPIO_PIN(INST(n),   trig_gpios), \
+        .trig_flags = DT_GPIO_FLAGS(INST(n), trig_gpios), \
+        .echo_port  = DT_GPIO_LABEL(INST(n), echo_gpios), \
+        .echo_pin   = DT_GPIO_PIN(INST(n),   echo_gpios), \
+        .echo_flags = DT_GPIO_FLAGS(INST(n), echo_gpios), \
+    }; \
+    static struct hc_sr04_data hc_sr04_data_##n; \
+    DEVICE_AND_API_INIT(hc_sr04_##n, \
+                DT_LABEL(INST(n)), \
+                hc_sr04_init, \
+                &hc_sr04_data_##n, \
+                &hc_sr04_cfg_##n, \
+                POST_KERNEL, \
+                CONFIG_SENSOR_INIT_PRIORITY, \
+                &hc_sr04_driver_api);
+
+DT_INST_FOREACH_STATUS_OKAY(HC_SR04_DEVICE)
+
+#if DT_NUM_INST_STATUS_OKAY(DT_DRV_COMPAT) == 0
+#warning "HC_SR04 driver enabled without any devices"
+#endif
diff --git a/dts/bindings/sensor/elecfreaks,hc-sr04.yaml b/dts/bindings/sensor/elecfreaks,hc-sr04.yaml
new file mode 100644
index 0000000000..eabc16e3bf
--- /dev/null
+++ b/dts/bindings/sensor/elecfreaks,hc-sr04.yaml
@@ -0,0 +1,29 @@
+# Copyright (c) 2020 Daniel Veilleux
+# SPDX-License-Identifier: LicenseRef-BSD-5-Clause-Nordic
+
+description: HC-SR04 Ultrasonic Ranging Module
+
+compatible: "elecfreaks,hc-sr04"
+
+include: base.yaml
+
+properties:
+  label:
+    required: true
+    type: string
+    description: Human readable string describing the device (used as device_get_binding() argument)
+
+  status:
+    required: true
+    type: string
+    description: Human readable string describing the device's status
+
+  trig-gpios:
+    type: phandle-array
+    description: Trigger pin
+    required: true
+
+  echo-gpios:
+    type: phandle-array
+    description: Echo pin
+    required: true
diff --git a/include/toolchain/gcc.h b/include/toolchain/gcc.h
index 2b0953a0cc..43713a8914 100644
--- a/include/toolchain/gcc.h
+++ b/include/toolchain/gcc.h
@@ -244,9 +244,8 @@ do {                                                                    \
 #define __WARN(msg) __WARN1(GCC warning msg)
 #define __WARN1(s) _Pragma(#s)
 
-/* Generic message */
 #ifndef __DEPRECATED_MACRO
-#define __DEPRECATED_MACRO __WARN("Macro is deprecated")
+#define __DEPRECATED_MACRO
 #endif
 
 /* These macros allow having ARM asm functions callable from thumb */
